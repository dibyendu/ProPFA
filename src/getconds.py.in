#!/usr/bin/python2.7

import sys
import glob
import decimal as dec
import subprocess, os
import sympy as sy
eq_set = []

def rm_det(string):
    if '%' in string:
        return string
    loop_max=0
    while('/' in string and loop_max<10):
#        while("Mod" in string):
#            ID = replace_comma(string,"Mod")
#            #print ID
#            if(ID>=0):
#                string=string[0:ID]+' % '+string[ID+1:]
#                string=string.replace("Mod","",1)
        loop_max=loop_max+1
        string0=string.replace(' ','')
        div_at = string0.find('/')
        braces=0
        mult_with=""
        for i in range(div_at+1,len(string0)):
            if(string0[i]=='('):
                braces= braces+1
            elif(string0[i]==')'):
                braces=braces-1
            if braces==0 and (string0[i]=='+' or string0[i]=='-' or string0[i]=='*' or string0[i]=='%'):
                break
            mult_with =mult_with+string0[i]
        string=mult_with + '* ('+string+')'
        try:
            string = str(sy.expand(sy.simplify(string)))
        except:
            try:
                string = str(sy.expand(sy.sympify(string)))
            except:
                pass
        #print mult_with
    return str(string)

#print rm_det("10 + 10/(a + b)+3/10+5/a")


def replace_comma(s, char):
    index = 0

    if char in s:
        c = char[0]
        for ch in s:
            if ch == c:
                if s[index:index+len(char)] == char:
                    #print find_comma(s,index+len(char))
                    return find_comma(s,index+len(char))
            index += 1

    return -1


        
    
def find_comma(s,index):
    for i in range(index,len(s)):
        if s[i] == ",":
            return i
    return -1

def get_dirs(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]
                
def get_ergo(a_dir):
    os.chdir(a_dir)
    return glob.glob("*ACTUAL.ergo")+glob.glob("simple_loop_inv_established.ergo")
    
    

def get_conds(a_dir,cur_dir,user_folder):
    from_all_folders=[]
    dirs_list=[]
    if(len(user_folder)>0):
        dirs_list=user_folder
    else:
        dirs_list=get_dirs(a_dir)
    for folder in dirs_list:
#        if (str(folder).split('_')[1]==str(assert_no)):
        file_=get_ergo(a_dir+"/"+folder+"/hoare")
        #print "folder : "+folder
        os.chdir(cur_dir)            
        if len(file_)>0:
            #print "file_ : "+file_
            f = open(a_dir+"/"+folder+"/hoare/"+file_[0],'r')
            lines = []
            lets = []
            conds = []
            eqs = []
            strings=[]
            string=f.readline()
            while(not string.startswith("goal")):
                string=f.readline()
                pass
            if not string.strip().endswith('ACTUAL:'):
                if('int.' in string):
                    tempstr=string.split('int.')[1]
                    templist=tempstr.split('->')
                    for ele in templist:
                        if not ele == templist[-1]:
                            strings.append(ele+'->')
                        else:
                            strings.append(ele)
                elif('float.' in string):
                    tempstr=string.split('float.')[1]
                    templist=tempstr.split('->')
                    for ele in templist:
                        if not ele == templist[-1]:
                            strings.append(ele+'->')
                        else:
                            strings.append(ele)
            
            string=f.readline().strip()
            print string
            while(string):                
                strings.append(string)
                string=f.readline().strip()
            
            
            line_no=0
            string=strings[line_no]
            line_no+=1
            
            
            while line_no<len(strings) and (strings[line_no].startswith('+') or strings[line_no].startswith('-') or strings[line_no].startswith('*') or strings[line_no].startswith('/') or string.count('(')-string.count(')')!=0):                
                string +=strings[line_no]
                line_no+=1
            while(len(string)>0):
                
                if(string.startswith("(") and not ("not is" in string)):
                    string= string.replace('truncate','').replace('real_of_int','').replace('to_sint32','').replace('or','->')
                    while("safe_comp_div" in string or "safe_comp_mod" in string):
                        #print "looping : "+string
                        if("safe_comp_div" in string):
                            ID = replace_comma(string,"safe_comp_div")
                            if(ID>=0):
                                string=string[0:ID]+'/'+string[ID+1:]
                                string=string.replace("safe_comp_div","",1)
                        if("safe_comp_mod" in string):
                            ID = replace_comma(string,"safe_comp_mod")
                            if(ID>=0):
                                string=string[0:ID]+'%'+string[ID+1:]
                                string=string.replace("safe_comp_mod","",1)
                        if("Mod" in string):
                            ID = replace_comma(string,"Mod")
                            if(ID>=0):
                                string=string[0:ID]+'%'+string[ID+1:]
                                string=string.replace("Mod","",1)
                                
                    conds=[]
                    conds.append(string)
                    conds.append("c")
                    lines.append(conds)
                elif(string.startswith("let")):
                    string= string.replace('truncate','').replace('real_of_int','').replace('to_sint32','')
                    while("safe_comp_div" in string or "safe_comp_mod" in string or "Mod" in string):
                        #print "looping : "+string
                        if("safe_comp_div" in string):
                            ID = replace_comma(string,"safe_comp_div")
                            if(ID>=0):
                                string=string[0:ID]+' / '+string[ID+1:]
                                string=string.replace("safe_comp_div","",1)
                        if("safe_comp_mod" in string):
                            ID = replace_comma(string,"safe_comp_mod")
                            if(ID>=0):
                                string=string[0:ID]+' % '+string[ID+1:]
                                string=string.replace("safe_comp_mod","",1)
                        if("Mod" in string):
                            ID = replace_comma(string,"Mod")
                            if(ID>=0):
                                string=string[0:ID]+' % '+string[ID+1:]
                                string=string.replace("Mod","",1)
                    lets=[]
                    lets.append(string.split("let")[1].split(':')[0].strip())
                    lets.append("l")
                    lines.append(lets)
                if line_no < len(strings):
                    string=strings[line_no]
                    line_no+=1
                    while line_no<len(strings) and (strings[line_no].startswith('+') or strings[line_no].startswith('-') or strings[line_no].startswith('*') or strings[line_no].startswith('/') or string.count('(')-string.count(')')!=0):
                        string +=strings[line_no]
                        line_no+=1
                else:
                    string ="" 
            
            
            final_cond = ""    
            for each in lines:
                if(each[1]=='c'):
                    final_cond=final_cond+" "+each[0].replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('- >','->').replace('e - ','e-')
                elif(each[1]=='l'):
                    lets=[]
                    lets.append(each[0].split('=')[0].replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-').strip())
                    lets.append(each[0].split('=')[1].replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-').strip())
                    eqs.append(lets)

            counter=0
            check=True      
            while(check):
                size = len(eqs)-1
                check=False
                
                while(size>=0):
                    print final_cond.replace(' ','')
                    print 'checking for : '+eqs[size][0]
                    final_cond=final_cond+' '
                    if(eqs[size][0]+' ' in final_cond) or (eqs[size][0]+'+' in final_cond) or (eqs[size][0]+'-' in final_cond) or (eqs[size][0]+'*' in final_cond) or (eqs[size][0]+'/' in final_cond) or (eqs[size][0]+')' in final_cond):                       
                        if( ' '+eqs[size][0] in final_cond) or ('+'+eqs[size][0] in final_cond) or ('-'+eqs[size][0] in final_cond) or ('*'+eqs[size][0] in final_cond) or ('/'+eqs[size][0] in final_cond) or ('('+eqs[size][0] in final_cond) or final_cond.startswith(eqs[size][0]):                            
                            final_cond=final_cond.replace(eqs[size][0]+' ',"("+eqs[size][1]+")")
                            final_cond=final_cond.replace(eqs[size][0]+'+',"("+eqs[size][1]+")+")
                            final_cond=final_cond.replace(eqs[size][0]+'-',"("+eqs[size][1]+")-")
                            final_cond=final_cond.replace(eqs[size][0]+'*',"("+eqs[size][1]+")*")
                            final_cond=final_cond.replace(eqs[size][0]+'/',"("+eqs[size][1]+")/")
                            final_cond=final_cond.replace(eqs[size][0]+')',"("+eqs[size][1]+"))")
                            check=True                            
                            print final_cond.replace(' ','')
                            print '\n\n\n'
                            print check
                            temp_list=final_cond.split('->')
                            final_cond=''
                            for cond in temp_list:
                                try:
                                    if(len(final_cond)>0):
                                        try:
                                            final_cond +=' -> '+str(sy.simplify(str(cond))).replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-')
                                        except:
                                            final_cond +=' -> '+str(sy.sympify(str(cond))).replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-')
                                    else:
                                        try:
                                            final_cond =str(sy.simplify(str(cond))).replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-')
                                        except:
                                            final_cond =str(sy.sympify(str(cond))).replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-')
                                except:
                                    if(len(final_cond)>0):
                                        final_cond+=' -> '+ cond.replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-')
                                    else:
                                        final_cond=cond.replace('(',' ( ').replace(')',' ) ').replace('+',' + ').replace('-',' - ').replace('*',' * ').replace('/',' / ').replace('e - ','e-')

                    
                            counter+=1
                    size=size-1

                
            eqs = []
            eqs = final_cond.split("->") 
            final_cond = ""
            for each in eqs:
                
                if len(each.strip())>0:
                    if( ">=" in each):
                        each=each.split(">=")[0]+' - ( '+each.split(">=")[1]+' ) >= 0'
                    elif( ">" in each):
                        each=each.split(">")[0]+' - ( '+each.split(">")[1]+' + 1 ) >= 0'
                    elif( "<=" in each):
                        each=each.split("<=")[0]+' - ( '+each.split("<=")[1]+' ) <= 0'
                    elif( "<" in each):
                        each=each.split("<")[0]+' - ( '+each.split("<")[1]+' - 1 ) <= 0'
                    elif( "=" in each):
                        each=each.split("=")[0]+' - ( '+each.split("=")[1]+' ) '
                        
                    if(len(final_cond)!=0):
                        try:
                            try:
                                final_cond=final_cond+" -> "+str(sy.expand(sy.simplify(each.strip())))
                            except:
                                final_cond=final_cond+" -> "+str(sy.expand(sy.sympify(each.strip())))
                        except:
                            final_cond=final_cond +" -> "+ each
                    else:
                        try:
                            final_cond = str(sy.expand(sy.simplify(str(each.strip()))))                        
                        except:
                            try:
                                final_cond = str(sy.expand(sy.sympify(str(each.strip()))))     
                            except:
                                final_cond=each
            #print sy.expand(sy.simplify(final_cond.split("->")[0].strip()))            
            while("Mod" in final_cond):
                ID = replace_comma(final_cond,"Mod")
                if(ID>=0):
                    final_cond=final_cond[0:ID]+' % '+final_cond[ID+1:]
                    final_cond=final_cond.replace("Mod","",1)

            
            #print "final: "+final_cond
            
            each_cond=final_cond.split('->')
            all_set=[]
            for one in each_cond:
                single_set=[]
                if( ">=" in one):
                    single_set.append(">=")
                    single_set.append(one.split(">=")[0].strip())
                    single_set[1]=rm_det(str(single_set[1]))
                elif( ">" in one):
                    single_set.append(">")
                    single_set.append(one.split(">")[0].strip())
                    single_set[1]=rm_det(str(single_set[1]))
                elif( "<=" in one):
                    single_set.append("<=")
                    single_set.append(one.split("<=")[0].strip())
                    single_set[1]=rm_det(str(single_set[1]))
                elif( "<" in one):
                    single_set.append("<")
                    single_set.append(one.split("<")[0].strip())
                    single_set[1]=rm_det(str(single_set[1]))
                else:
                    single_set.append("=")
                    single_set.append(one.strip())
                    single_set[1]=rm_det(str(single_set[1]))
                single=single_set[1].replace(' ','').replace('+',' +').replace('-',' -').replace('e - ','e-').replace('e -','e-').replace('e- ','e-')
                #operands=re.split("[+\*-]+", str(single_set[1]))
#                consts=re.split("[+-]+", str(single_set[1]))
#                for const in consts:
#                   if const.isdigit():
#                       print const

                if ('**' not in single and '/' not in single and '%' not in single):
                    terms=single.split(' ')
                    final_vals={}
                    const=0
                    for term in terms:
                        if len(term)!=0:                            
                            try:
                                const=-1*float(term)
                                #print 'term : '+`const`
                            except:
                                if '*' in term:
                                    try:
                                        if(term.count('*')==1):
                                            final_vals[term.split('*')[1].split('_')[0]]=float(term.split('*')[0])
                                        else:
                                            print 'non-linear equation : '
                                            print single_set[1] + ' ' +single_set[0]+' ='
                                            print "++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                                            exit(1)
                                    except:
                                        print 'non-linear equation : '
                                        print single_set[1] + ' ' +single_set[0]+' ='
                                        print "++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                                        exit(1)
                                else:
                                    if '+' in term:
                                        final_vals[term.split('+')[1].split('_')[0].strip()]=1
                                    elif '-' in term:
                                        final_vals[term.split('-')[1].split('_')[0].strip()]=-1
                                    else:
                                        final_vals[term.split('_')[0].strip()]=1
                    single_set.append(final_vals)
                    single_set.append(const)
                    print 'inequality : '+single_set[0]
                    print 'expression : '+single_set[1]
                    decimal_place =[]
                    e = abs(dec.Decimal(str(const)).as_tuple().exponent)
                    if((const-int(const))>0.0 or (const-int(const))<0.0):
                        decimal_place.append(e)
                    else:
                        decimal_place.append(0)
                    for each_coef in single_set[2].values() :
                        e = abs(dec.Decimal(str(each_coef)).as_tuple().exponent)
                        if((each_coef-int(each_coef))>0.0 or (each_coef-int(each_coef))<0.0):
                            decimal_place.append(e)
                        else:
                            decimal_place.append(0)
                    mul_pow=max(decimal_place)     
                    for val in single_set[2].keys():
                        single_set[2][val] = int(single_set[2][val]*pow(10,mul_pow))
                        print 'coefficient : '+`single_set[2][val]`+' | var : ' +val
                    #print terms
                    const = int(const*pow(10,mul_pow))
                    print 'const : '+ `const`
                    
                    print "------------------------------------------------------"
                    all_set.append(single_set)
                else:
                    print 'non-linear equation : '
                    print single_set[1] + ' ' +single_set[0]+' 0'
                    print "++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                    exit(1)
            all_set.append(folder)
            from_all_folders.append(all_set)
    return from_all_folders

all_subregions=[]
  
def get_all_regions(all_vars,size,each_array,var_no,from_all_folders,order,cur_dir):
    if(var_no==size):        
        probs=[]
        latte_input=[]
                
        for index in range(0,len(each_array)):
            probs.append(all_vars[index][0][each_array[index]])
            latte_input.append(all_vars[index][1][2*each_array[index]])
            latte_input.append(all_vars[index][1][2*each_array[index]+1])     
            
        lattes = open(cur_dir+'/latte_input.txt','w')
        lattes.write(`len(latte_input)`+' '+`size+1`+'\n')
        
        print "for calculating subregion: "
        print `len(latte_input)`+' '+`size+1`
        for one in latte_input:
            print str(one)
            lattes.write(str(one)+'\n')            
            pass
        lattes.close()
        input_vol =0
        cmd = "@LATTE@ --valuation=volume " + cur_dir + "/latte_input.txt"        
        try:
            out =subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT)
            check_ans=True
            for answers in out.split('\n'):
                if answers.strip().startswith('Decimal:'):
                    area = float(answers.split(':')[1].strip())
                    input_vol = area
                    get_all_regions.inputregion +=area
                    print 'area : '+`area`
                    break
        except subprocess.CalledProcessError as e:
            if 'Empty polytope' in e.output:
                out =  str(e.output)               
                return
            elif 'Aborted (core dumped)' in e.output:
                print e.output
                return
            else:
                print e.output
                raise RuntimeError("command '{}' return with error (code {}): {}".format(e.cmd, e.returncode, e.output))
                
        
        print "--------------------------------------------"
        final_path_prob=0
        for file_ in from_all_folders:
            linears_at=[]
            conds=[]
            for cond in file_:
                if cond != file_[-1]:
                    sorting=[]
                    for i in range(0,size+1):
                        sorting.append(0)
                    sorting[0]=int(cond[3])
                    if cond[0]=='=':
                        linears_at.append(len(latte_input)+len(conds)+1)                                        
                        for condi in cond[2].keys():
                            try:
                                sorting[order[condi]]=int(cond[2][condi])
                            except:
                                pass
                    elif '>' in cond[0]:
                        sorting[0]=-1*int(cond[3])
                        for condi in cond[2].keys():
                            try:
                                sorting[order[condi]]=-1*int(cond[2][condi])
                            except:
                                pass
                    elif '<' in cond[0]:
                        for condi in cond[2].keys():
                            try:
                                sorting[order[condi]]=int(cond[2][condi])
                            except:
                                pass
                    line=''
                    for val in sorting:
                        line =line+`val`+' '
                    conds.append(line)
        
            
            
            
            
            lattes = open(cur_dir+'/latte_input.txt','w')
            lattes.write(`len(latte_input)+len(conds)`+' '+`size+1`+'\n')
            print 'calculating failure region of an assert from above subregion :'
            print `len(latte_input)+len(conds)`+' '+`size+1`
            if len(linears_at) >0:
                line ='linearity '+`len(linears_at)`+' '
                for at in linears_at:
                    line = line+`at`+' '
                conds.append(line)
            for one in latte_input:
                print one
                lattes.write(str(one)+'\n')            
                pass
            for one in conds:
                print one
                lattes.write(str(one)+'\n')            
                pass
            lattes.close()
            
            cmd = "@LATTE@ --valuation=volume " + cur_dir + "/latte_input.txt"
            covered_vol =0
            try:
                out =subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT)
                check_ans=True
                for answers in out.split('\n'):
                    if answers.strip().startswith('Decimal:'):
                        area = float(answers.split(':')[1].strip())
                        print 'area : '+`area`
                        print 'Probs :'+`probs`
                        for prob in probs:
                            area*=float(prob)
                        covered_vol=area
                        get_all_regions.counter +=area   
                        print answers.strip()
                        check_ans=False
                        break
                if(check_ans):
                    print 'empty region'

            except subprocess.CalledProcessError as e:
                if 'Empty polytope' in e.output:
                    out =  str(e.output)
                    print 'empty region'
                elif 'Aborted (core dumped)' in e.output:
                    print e.output
                    return
                else:
                    print e.output
                    raise RuntimeError("command '{}' return with error (code {}): {}".format(e.cmd, e.returncode, e.output))

            if file_[-1].endswith('_t'):
                reliabs = open(cur_dir+'/singlepaths/'+file_[-1].replace('_t','.txt'))
                path_prob=covered_vol/input_vol
                probs_line=reliabs.readline()
                
                try:
                    path_prob=path_prob*(float(probs_line.split('+')[0]))
                    probs_line=probs_line.split('+')[1]
                    for each_prob in probs_line.split('-'):
                        path_prob*=float(each_prob)
                except:
                    pass
                final_path_prob+=path_prob
            elif file_[-1].startswith('ifpath'):
                
                get_all_regions.ifpath=float(covered_vol/input_vol)
                print '++++++++++++ifpath '+`get_all_regions.ifpath`+'++++++++++++++++++++++++++++++++++++'
                get_all_regions.pathprob+=get_all_regions.ifpath
            elif file_[-1].startswith('inv'):
                reliabs = open(cur_dir+'/singlepaths/'+file_[-1].replace('_t','.txt').replace('_f','.txt'))
                path_prob=covered_vol/input_vol
                probs_line=reliabs.readline()
                try:
                    if(file_[-1].endswith('_f')):
                        path_prob=path_prob*(1-float(probs_line.split('+')[0]))
                    elif(file_[-1].endswith('_t')):
                        path_prob=path_prob*(float(probs_line.split('+')[0]))
                    probs_line=probs_line.split('+')[1]
                    for each_prob in probs_line.split('-'):
                        path_prob*=float(each_prob)
                    get_all_regions.invprob+=path_prob
                except:
                    pass
            print '------------------------------------------------'
        
        print '++++++++++++final_path_prob '+`final_path_prob`+'++++++++++++++++++++++++++++++++++++'
        print '++++++++++++probability before '+`get_all_regions.probability`+'++++++++++++++++++++++++++++++++++++'
        get_all_regions.probability+=final_path_prob
        print '++++++++++++probability after '+`get_all_regions.probability`+'++++++++++++++++++++++++++++++++++++'
        print '++++++++++++inv probability after '+`get_all_regions.invprob`+'++++++++++++++++++++++++++++++++++++'
    else:
        for i in range(0,len(all_vars[var_no][0])):
            each_array[var_no]=i
            get_all_regions(all_vars,size,each_array,var_no+1,from_all_folders,order,cur_dir)
            
get_all_regions.ifpath = 0
get_all_regions.pathprob = 0              
get_all_regions.probability = 0             
get_all_regions.counter = 0   
get_all_regions.inputregion = 0
get_all_regions.invprob = 0

            
def generate_regions(read_input,from_all_folders,cur_dir):
    f = open(read_input, 'r')
    lines = f.readlines()
    f.close()
    order ={}
    rank=1
    for var in lines[0].split('<'):
        order[var.strip()]=rank
        rank+=1
    all_vars=[]
    each_vars=[]
    each_var_eqs=[]
    for i in range(2,len(lines)):
        if( not lines[i].startswith('probabilities')):
            each_var_eqs.append(lines[i].replace('\n',''))
        else:
            probs = lines[i].replace('\n','').split(' ')
            del probs[0]
            each_vars.append(probs)
            each_vars.append(each_var_eqs)
            all_vars.append(each_vars)
            each_vars=[]
            each_var_eqs=[]
            probs=[]
#    print len(all_vars)
#    for row in all_vars:
#        print row[1]
#    return
    each_array=[]
    for i in range(0,len(all_vars)):
        each_array.append(0)
    get_all_regions(all_vars,len(all_vars),each_array,0,from_all_folders,order,cur_dir)
    
            
        
    

if __name__ == "__main__":

    cur_dir = os.getcwd()
    a_dir = cur_dir+"/singlepaths"
    directs = get_dirs(cur_dir)
    if(len(sys.argv)>1):
        from_all_folders = get_conds(a_dir,cur_dir,sys.argv[1:])
    else:
        empty_list=[]
        from_all_folders = get_conds(a_dir,cur_dir,empty_list)
    read_input='latte_input'
    all_subregions = generate_regions(read_input,from_all_folders,cur_dir)
    os.chdir(cur_dir)
    
    try:
        PathProbs=open('ifpaths.txt','r')
        totalpaths=PathProbs.readlines()
        if(len(sys.argv)>1 and sys.argv[1].startswith('inv')):
            temp=float(totalpaths[-1].split(':')[1].strip())*get_all_regions.invprob
            totalpaths[-1]=totalpaths[-1].split(':')[0]+':'+`temp`
        PathProbs.close()
        totalno=len(totalpaths)+1
        writeprobs=open('ifpaths.txt','w')   
        writeprobs.truncate()
        for eachpath in totalpaths:
            writeprobs.write(eachpath)
        writeprobs.write('Path'+`totalno`+':'+`get_all_regions.pathprob`+'\n')
        writeprobs.close()
    except:
        total_paths=0
        writeprobs=open('ifpaths.txt','w')   
        writeprobs.truncate()
        writeprobs.write('Path1:'+`get_all_regions.pathprob`+'\n')
        writeprobs.close()    
    
    try:
        PathProbs=open('pathprobs.txt','r')
        totalpaths=PathProbs.readlines()
        PathProbs.close()
        totalno=len(totalpaths)+1
        writeprobs=open('pathprobs.txt','w')   
        writeprobs.truncate()
        for eachpath in totalpaths:
            writeprobs.write(eachpath)
        writeprobs.write('Path'+`totalno`+':'+`get_all_regions.probability`+'\n')
        writeprobs.close()
        
    except:
        total_paths=0
        writeprobs=open('pathprobs.txt','w')   
        writeprobs.truncate()
        writeprobs.write('Path1:'+`get_all_regions.probability`+'\n')
        writeprobs.close()
        
#    print "Failure Region : "+`get_all_regions.counter`
#    print "Input region : "+`get_all_regions.inputregion`
#    print float(get_all_regions.counter/get_all_regions.inputregion)